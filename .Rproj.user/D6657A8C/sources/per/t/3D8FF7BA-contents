ggplot(data - iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point()
# Example: advance scatter plot
library(ggplot2)
ggplot(data - iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point()
# Example: advance scatter plot
library(ggplot2)
ggplot(data - iris, aes(x = Petal.Width, y = Petal.Length, color = species)) + geom_point()
# Example: advance scatter plot
library(ggplot2)
ggplot(data - iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point()
# Example: advance scatter plot
library(ggplot2)
ggplot(data = iris, aes(x = Petal.Width, y = Petal.Length, color = Species)) + geom_point()
a <- 23
b <- 12
addition <- a + b
subtractio <- a - b
multiplication <- a * b
division <- a/b
a <- 23
b <- 12
addition <- a + b
subtraction <- a - b
multiplication <- a * b
division <- a/b
#print result
print(additon)
a <- 23
b <- 12
addition <- a + b
subtraction <- a - b
multiplication <- a * b
division <- a/b
#print result
print(addition)
pring(subtraction)
a <- 23
b <- 12
addition <- a + b
subtraction <- a - b
multiplication <- a * b
division <- a/b
#print result
print(addition)
print(subtraction)
print(multiplication)
print(division)
install.packages("gzfile")
setwd("C:/Users/vfashina/OneDrive - Oral Roberts University (1)/Fall2024/Visualization/Group_1-quarto-book/Group_1")
airquality
### Today we learnt visualization using python on Jupyter Lab.  We all worked the AirQuality Data set, this time using Python to visualize.
### You can find the full details of this visualization in my
### \[Jupyter Lab\](Tut_Python_vfashina_092024.ipynb)
library(ggplot2)
library(dplyr)
library(readxl)
data_2017 <- read.csv("Hurrican_Irma_2017_Cleaned.csv")
data_combined <- rbind(data_2017, data_2018)
data_2017 <- read.csv("Hurrican_Irma_2017_Cleaned.csv")
data_2017 <- read.csv("Hurrican_Irma_2017_Cleaned_2.csv")
data_2018 <- read.csv("Hurrican_Irma_2018_Cleaned_2.csv")
data_combined <- rbind(data_2017, data_2018)
data_combined$Date <- as.Date(data_combined$Date, format="%m/%d/%Y")
data_combined$Year <- format(data_combined$Date, "%Y")
daily_counts <- data_combined %>%
group_by(Date, Year) %>%
summarize(Daily_Obs_Count = sum(Daily.Obs.Count, na.rm = TRUE))
ggplot(daily_counts, aes(x = Date, y = Daily_Obs_Count, fill = Year)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Daily Observation Count for 2017 and 2018",
x = "Date",
y = "Observation Count") +
scale_fill_manual(values = c("2017" = "skyblue", "2018" = "navyblue")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
data_2017 <- read.csv("Hurrican_Irma_2017_Cleaned.csv")
data_2017 <- read.csv("Hurrican_Irma_2017_Cleaned_2.csv")
data_2018 <- read.csv("Hurrican_Irma_2018_Cleaned_2.csv")
data_combined <- rbind(data_2017, data_2018)
data_combined$Date <- as.Date(data_combined$Date, format="%m/%d/%Y")
data_combined$Year <- format(data_combined$Date, "%Y")
data_2017_only <- filter(data_combined, Year == "2017")
data_2018_only <- filter(data_combined, Year == "2018")
daily_counts_2017 <- data_2017_only %>%
group_by(Date) %>%
summarize(Daily_Obs_Count = sum(Daily.Obs.Count, na.rm = TRUE))
p1 <- ggplot(daily_counts_2017, aes(x = Date, y = Daily_Obs_Count)) +
geom_bar(stat = "identity", fill = "navyblue") +
labs(title = "Daily Observation Count for 2017",
x = "Date",
y = "Observation Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 2))
p2 <- ggplot(data_2018_only, aes(x = Date, y = Daily.Obs.Count)) +
geom_bar(stat = "identity", fill = "purple") +
labs(title = "Daily Observation Count for 2018",
x = "Date",
y = "Observation Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p1)
print(p2)
library(ggplot2)
library(dplyr)
library(gridExtra) # For arranging multiple plots
data_2017 <- read.csv("Hurrican_Irma_2017_Cleaned.csv")
data_combined <- rbind(data_2017, data_2018)
data_combined$Date <- as.Date(data_combined$Date, format="%m/%d/%Y")
data_combined$Year <- format(data_combined$Date, "%Y")
data_combined$Month <- format(data_combined$Date, "%b") # Abbreviated month names
monthly_avg_2017 <- data_combined %>%
filter(Year == "2017") %>%
group_by(Month) %>%
summarize(Avg_Daily_Obs_Count = mean(Daily.Obs.Count, na.rm = TRUE))
monthly_avg_2018 <- data_combined %>%
filter(Year == "2018") %>%
group_by(Month) %>%
summarize(Avg_Daily_Obs_Count = mean(Daily.Obs.Count, na.rm = TRUE))
monthly_avg_2017$Month <- factor(monthly_avg_2017$Month, levels = month.abb)
monthly_avg_2018$Month <- factor(monthly_avg_2018$Month, levels = month.abb)
p1 <- ggplot(monthly_avg_2017, aes(x = Month, y = Avg_Daily_Obs_Count)) +
geom_bar(stat = "identity", fill = "blue") +
labs(title = "Average Daily Observation Count by Month for 2017",
x = "Month",
y = "Average Observation Count") +
theme_minimal()
# Plot average daily observation counts by month for 2018
p2 <- ggplot(monthly_avg_2018, aes(x = Month, y = Avg_Daily_Obs_Count)) +
geom_bar(stat = "identity", fill = "red") +
labs(title = "Average Daily Observation Count by Month for 2018",
x = "Month",
y = "Average Observation Count") +
theme_minimal()
grid.arrange(p1, p2, ncol = 1)
library(ggplot2)
library(dplyr)
library(gridExtra) # For arranging multiple plots
data_2017 <- read.csv("Hurrican_Irma_2017_Cleaned.csv")
data_combined <- rbind(data_2017, data_2018)
data_combined$Date <- as.Date(data_combined$Date, format="%m/%d/%Y")
data_combined$Year <- format(data_combined$Date, "%Y")
data_2017_only <- filter(data_combined, Year == "2017")
data_2018_only <- filter(data_combined, Year == "2018")
p1 <- ggplot(data_2017_only, aes(x = Date, y = Daily.AQI.Value)) +
geom_line(color = "blue") +
labs(title = "Daily AQI for 2017",
x = "Date",
y = "Daily.AQI.Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p2 <- ggplot(data_2018_only, aes(x = Date, y = Daily.AQI.Value)) +
geom_line(color = "red") +
labs(title = "Daily AQI for 2018",
x = "Date",
y = "Daily.AQI.Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(p1, p2, ncol = 1)
#| echo: false
# Load necessary libraries
library(ggplot2)
library(dplyr)
# lubridate - R library for converting date objects
library(lubridate)
# Load dataset
mydata <- read.csv("Corrected_Ozone_Data_for_Rosenstiel_and_Perdue_Stations.csv")
str(mydata)
summary(mydata)
# Convert date column from chr to date type
mydata$Date_Rosenstiel <- as.Date(mydata$Date_Rosenstiel, format = "%m/%d/%Y")
mydata$Date_Perdue <- as.Date(mydata$Date_Perdue, format = "%m/%d/%Y")
#Pipe my dataset into Select() to reduce the size by selecting the enclosed columns
# Reshape data to long format for ggplot2 - name it data_long and pipe into pivot_longer
data_long <- mydata %>%
select(Date_Rosenstiel, Max_Ozone_Concentration_Rosenstiel,
Date_Perdue, Max_Ozone_Concentration_Perdue) %>%
pivot_longer(
cols = c(Max_Ozone_Concentration_Rosenstiel, Max_Ozone_Concentration_Perdue),
names_to = "Station",
values_to = "Ozone_Concentration",
names_prefix = "Max_Ozone_Concentration_"
) %>%
mutate(
Date = ifelse(Station == "Rosenstiel", Date_Rosenstiel, Date_Perdue),
Date = as.Date(Date)
)
#| echo: false
# Load necessary libraries
library(ggplot2)
library(dplyr)
# lubridate - R library for converting date objects
library(lubridate)
library(tidyr)
# Load dataset
mydata <- read.csv("Corrected_Ozone_Data_for_Rosenstiel_and_Perdue_Stations.csv")
str(mydata)
summary(mydata)
# Convert date column from chr to date type
mydata$Date_Rosenstiel <- as.Date(mydata$Date_Rosenstiel, format = "%m/%d/%Y")
mydata$Date_Perdue <- as.Date(mydata$Date_Perdue, format = "%m/%d/%Y")
#Pipe my dataset into Select() to reduce the size by selecting the enclosed columns
# Reshape data to long format for ggplot2 - name it data_long and pipe into pivot_longer
data_long <- mydata %>%
select(Date_Rosenstiel, Max_Ozone_Concentration_Rosenstiel,
Date_Perdue, Max_Ozone_Concentration_Perdue) %>%
pivot_longer(
cols = c(Max_Ozone_Concentration_Rosenstiel, Max_Ozone_Concentration_Perdue),
names_to = "Station",
values_to = "Ozone_Concentration",
names_prefix = "Max_Ozone_Concentration_"
) %>%
mutate(
Date = ifelse(Station == "Rosenstiel", Date_Rosenstiel, Date_Perdue),
Date = as.Date(Date)
)
# Now load mydata with missing data points highlighted
ggplot(data_long, aes(x = Date, y = Ozone_Concentration, color = Station)) +
geom_line() +
geom_point(data = filter(data_long, is.na(Ozone_Concentration)), aes(x = Date, y = 0),
color = "red", shape = 4, size = 3) +
scale_y_continuous(name = "Max Ozone Concentration (ppm)", limits = c(0, max(data_long$Ozone_Concentration, na.rm = TRUE))) +
scale_x_date(name = "Date", date_breaks = "1 month", date_labels = "%b %Y") +
labs(
title = "Ozone Concentration with Missing Data Points for Rosenstiel and Perdue Stations",
caption = "Initial dataset validation reveals a data gap during September, aligning with the period of Hurricane Irma."
) +
theme_minimal() +
theme(legend.position = "top", axis.text.x = element_text(angle = 45, hjust = 1))
# Now load mydata with missing data points highlighted
ggplot(data_long, aes(x = Date, y = Ozone_Concentration, color = Station)) +
geom_line() +
geom_point(data = filter(data_long, is.na(Ozone_Concentration) == FALSE), aes(x = Date, y = 0),
color = "red", shape = 4, size = 3) +
scale_y_continuous(name = "Max Ozone Concentration (ppm)", limits = c(0, max(data_long$Ozone_Concentration, na.rm = TRUE))) +
scale_x_date(name = "Date", date_breaks = "1 month", date_labels = "%b %Y") +
labs(
title = "Ozone Concentration with Missing Data Points for Rosenstiel and Perdue Stations",
caption = "Initial dataset validation reveals a data gap during September, aligning with the period of Hurricane Irma."
) +
theme_minimal() +
theme(legend.position = "top", axis.text.x = element_text(angle = 45, hjust = 1))
# Now load mydata with missing data points highlighted
ggplot(data_long, aes(x = Date, y = Ozone_Concentration, color = Station)) +
geom_line() +
geom_point(data = filter(data_long, is.na(Ozone_Concentration) == FALSE), aes(x = Date, y = 0),
color = "red", shape = 4, size = 3) +
scale_y_continuous(name = "Max Ozone Concentration (ppm)", limits = c(0, max(data_long$Ozone_Concentration, na.rm = FALSE))) +
scale_x_date(name = "Date", date_breaks = "1 month", date_labels = "%b %Y") +
labs(
title = "Ozone Concentration with Missing Data Points for Rosenstiel and Perdue Stations",
caption = "Initial dataset validation reveals a data gap during September, aligning with the period of Hurricane Irma."
) +
theme_minimal() +
theme(legend.position = "top", axis.text.x = element_text(angle = 45, hjust = 1))
#| echo: false
# Load the necessary packages
library(ggplot2)
library(dplyr)
# Load the dataset and rename it to avoid conflicts
mydata <- read.csv("Normalized_Hurricane_Irma_September_2017.csv", stringsAsFactors = FALSE)
# Convert the Date columns to Date type using the correct format
mydata$Date <- as.Date(mydata$Date, format = "%m/%d/%Y")
mydata$Date.1 <- as.Date(mydata$Date.1, format = "%m/%d/%Y")
# Filter out rows where Date is NA
mydata <- mydata %>%
filter(!is.na(Date)) %>%
mutate(
Missing_Rosenstiel = is.na(Daily.Max.8.hour.Ozone.Concentration),
Missing_Perdue = is.na(Daily.Max.8.hour.Ozone.Concentration.1)
)
# Create the plot
ggplot(mydata, aes(x = Date)) +
geom_line(aes(y = Daily.Max.8.hour.Ozone.Concentration, color = "Rosenstiel")) +
geom_point(data = dplyr::filter(mydata, Missing_Rosenstiel == FALSE), aes(y = Daily.Max.8.hour.Ozone.Concentration), color = "red", shape = 4, size = 3) +
geom_line(aes(y = Daily.Max.8.hour.Ozone.Concentration.1, color = "Perdue")) +
geom_point(data = dplyr::filter(mydata, Missing_Perdue == FALSE), aes(y = Daily.Max.8.hour.Ozone.Concentration.1), color = "blue", shape = 4, size = 3) +
labs(
title = "Daily Max 8-hour Ozone Concentration showing Missing Data (September 2017)",
caption = "Data collected from Rosenstiel and Perdue stations with intermittent data gaps, likely due to disruptions from Hurricane Irma's impact on monitoring equipment.",
x = "Date",
y = "Ozone Concentration (ppm)"
) +
# Set x-axis to show all dates in September
scale_x_date(date_breaks = "1 day", date_labels = "%b %d") +
scale_color_manual(values = c("Rosenstiel" = "green", "Perdue" = "orange")) +
theme_minimal() +
theme(legend.title = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
#| echo: false
library(ggplot2)
library(dplyr)
# Load the dataset
mydata <- read.csv("Corrected_Ozone_Data_for_Rosenstiel_and_Perdue_Stations.csv", stringsAsFactors = FALSE)
print(mydata)
# Convert the Date columns to Date type
mydata$Date_Rosenstiel <- as.Date(mydata$Date_Rosenstiel, format = "%m/%d/%Y")
mydata$Date_Perdue <- as.Date(mydata$Date_Perdue, format = "%m/%d/%Y")
# Filter data for September 2017 only
september_data <- data %>%
filter(
(format(Date_Rosenstiel, "%Y-%m") == "2017-09") |
(format(Date_Perdue, "%Y-%m") == "2017-09")
)
#| echo: false
library(ggplot2)
library(dplyr)
# Load the dataset
mydata <- read.csv("Corrected_Ozone_Data_for_Rosenstiel_and_Perdue_Stations.csv", stringsAsFactors = FALSE)
print(mydata)
# Convert the Date columns to Date type
mydata$Date_Rosenstiel <- as.Date(mydata$Date_Rosenstiel, format = "%m/%d/%Y")
mydata$Date_Perdue <- as.Date(mydata$Date_Perdue, format = "%m/%d/%Y")
library(ggplot2)
library(dplyr)
library(lubridate)
data <- read.csv("Hurricane_Irma_2018_Cleaned.csv")
data$Date <- as.Date(data$Date, format="%m/%d/%y")
data$Month <- month(data$Date)
data$Week <- week(data$Date)
data$Day <- day(data$Date)
ggplot(data, aes(x=Week, y=Day, fill=`Daily.Max.8.hour.Ozone.Concentration`)) +
geom_tile(color="white") +
scale_fill_gradient(low="yellow", high="red", name="Ozone Level (ppm)") +
labs(title="Ozone Levels Across Days/Weeks in 2018",
x="Week of the Year", y="Day of the Month") +
theme_minimal() +
facet_wrap(~ Month, ncol=3)
library(ggplot2)
library(dplyr)
library(lubridate)
data <- read.csv("Hurricane_Irma_2018_Cleaned.csv")
data$Date <- as.Date(data$Date, format="%m/%d/%y")
data$Month <- month(data$Date)
data$Week <- week(data$Date)
data$Day <- day(data$Date)
ggplot(data, aes(x=Week, y=Day, fill=`Daily.Max.8.hour.Ozone.Concentration`)) +
geom_tile(color="white") +
scale_fill_gradient(low="yellow", high="red", name="Ozone Level (ppm)") +
labs(title="Ozone Levels Across Days/Weeks in 2018",
x="Week of the Year", y="Day of the Month") +
theme_minimal() +
facet_wrap(~ Month, ncol=3)
library(ggplot2)
library(dplyr)
library(lubridate)
data <- read.csv("Hurricane_Irma_2018_Cleaned.csv")
data$Date <- as.Date(data$Date, format="%m/%d/%y")
data$Month <- month(data$Date)
data$Week <- week(data$Date)
data$Day <- day(data$Date)
ggplot(data, aes(x=Week, y=Day, fill=`Daily.Max.8.hour.Ozone.Concentration`)) +
geom_tile(color="white") +
scale_fill_gradient(low="yellow", high="red", name="Ozone Level (ppm)") +
labs(title="Ozone Levels Across Days/Weeks in 2018",
x="Week of the Year", y="Day of the Month") +
theme_minimal() +
facet_wrap(~ Month, ncol=3)
library(ggplot2)
library(dplyr)
library(sf)
data <- read.csv("Hurricane_Irma_2018_Cleaned.csv")
data$Date <- as.Date(data$Date, format="%m/%d/%y")
data_summary <- data %>%
group_by(Site.Latitude, Site.Longitude) %>%
summarise(Average_Ozone = mean(as.numeric(Daily.Max.8.hour.Ozone.Concentration), na.rm = TRUE))
ggplot(data_summary, aes(x=Site.Longitude, y=Site.Latitude, fill=Average_Ozone)) +
geom_tile(color="white") +
scale_fill_gradient(low="blue", high="red", name="Avg Ozone Level (ppm)") +
labs(title="Geographic Heat Map of Average Ozone Levels",
x="Longitude", y="Latitude") +
theme_minimal()
#| echo: false
# Load necessary libraries
library(ggplot2)
library(dplyr)
# lubridate - R library for converting date objects
library(lubridate)
library(tidyr)
# Load dataset
mydata <- read.csv("Corrected_Ozone_Data_for_Rosenstiel_and_Perdue_Stations.csv")
str(mydata)
summary(mydata)
# Convert date column from chr to date type
mydata$Date_Rosenstiel <- as.Date(mydata$Date_Rosenstiel, format = "%m/%d/%Y")
mydata$Date_Perdue <- as.Date(mydata$Date_Perdue, format = "%m/%d/%Y")
#Pipe my dataset into Select() to reduce the size by selecting the enclosed columns
# Reshape data to long format for ggplot2 - name it data_long and pipe into pivot_longer
data_long <- mydata %>%
select(Date_Rosenstiel, Max_Ozone_Concentration_Rosenstiel,
Date_Perdue, Max_Ozone_Concentration_Perdue) %>%
pivot_longer(
cols = c(Max_Ozone_Concentration_Rosenstiel, Max_Ozone_Concentration_Perdue),
names_to = "Station",
values_to = "Ozone_Concentration",
names_prefix = "Max_Ozone_Concentration_"
) %>%
mutate(
Date = ifelse(Station == "Rosenstiel", Date_Rosenstiel, Date_Perdue),
Date = as.Date(Date)
)
# Now load mydata with missing data points highlighted
ggplot(data_long, aes(x = Date, y = Ozone_Concentration, color = Station)) +
geom_line() +
geom_point(data = filter(data_long, is.na(Ozone_Concentration) == FALSE), aes(x = Date, y = 0),
color = "red", shape = 4, size = 3) +
scale_y_continuous(name = "Max Ozone Concentration (ppm)", limits = c(0, max(data_long$Ozone_Concentration, na.rm = TRUE))) +
scale_x_date(name = "Date", date_breaks = "1 month", date_labels = "%b %Y") +
labs(
title = "Ozone Concentration with Missing Data Points for Rosenstiel and Perdue Stations",
caption = "Initial dataset validation reveals a data gap during September, aligning with the period of Hurricane Irma."
) +
theme_minimal() +
theme(legend.position = "top", axis.text.x = element_text(angle = 45, hjust = 1))
#| echo: false
library(ggplot2)
library(dplyr)
# Load the dataset
mydata <- read.csv("Corrected_Ozone_Data_for_Rosenstiel_and_Perdue_Stations.csv", stringsAsFactors = FALSE)
#print(mydata)
# Convert the Date columns to Date type
mydata$Date_Rosenstiel <- as.Date(mydata$Date_Rosenstiel, format = "%m/%d/%Y")
mydata$Date_Perdue <- as.Date(mydata$Date_Perdue, format = "%m/%d/%Y")
#| echo: false
# Load necessary libraries
library(ggplot2)
library(dplyr)
# lubridate - R library for converting date objects
library(lubridate)
library(tidyr)
# Load dataset
mydata <- read.csv("Corrected_Ozone_Data_for_Rosenstiel_and_Perdue_Stations.csv")
#str(mydata)
#summary(mydata)
# Convert date column from chr to date type
mydata$Date_Rosenstiel <- as.Date(mydata$Date_Rosenstiel, format = "%m/%d/%Y")
mydata$Date_Perdue <- as.Date(mydata$Date_Perdue, format = "%m/%d/%Y")
#Pipe my dataset into Select() to reduce the size by selecting the enclosed columns
# Reshape data to long format for ggplot2 - name it data_long and pipe into pivot_longer
data_long <- mydata %>%
select(Date_Rosenstiel, Max_Ozone_Concentration_Rosenstiel,
Date_Perdue, Max_Ozone_Concentration_Perdue) %>%
pivot_longer(
cols = c(Max_Ozone_Concentration_Rosenstiel, Max_Ozone_Concentration_Perdue),
names_to = "Station",
values_to = "Ozone_Concentration",
names_prefix = "Max_Ozone_Concentration_"
) %>%
mutate(
Date = ifelse(Station == "Rosenstiel", Date_Rosenstiel, Date_Perdue),
Date = as.Date(Date)
)
# Now load mydata with missing data points highlighted
ggplot(data_long, aes(x = Date, y = Ozone_Concentration, color = Station)) +
geom_line() +
geom_point(data = filter(data_long, is.na(Ozone_Concentration) == FALSE), aes(x = Date, y = 0),
color = "red", shape = 4, size = 3) +
scale_y_continuous(name = "Max Ozone Concentration (ppm)", limits = c(0, max(data_long$Ozone_Concentration, na.rm = TRUE))) +
scale_x_date(name = "Date", date_breaks = "1 month", date_labels = "%b %Y") +
labs(
title = "Ozone Concentration with Missing Data Points for Rosenstiel and Perdue Stations",
caption = "Initial dataset validation reveals a data gap during September, aligning with the period of Hurricane Irma."
) +
theme_minimal() +
theme(legend.position = "top", axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(dplyr)
library(lubridate)
data <- read.csv("Hurricane_Irma_2018_Cleaned.csv")
data$Date <- as.Date(data$Date, format="%m/%d/%y")
data$Month <- month(data$Date)
data$Week <- week(data$Date)
data$Day <- day(data$Date)
ggplot(data, aes(x=Week, y=Day, fill=`Daily.Max.8.hour.Ozone.Concentration`)) +
geom_tile(color="white") +
scale_fill_gradient(low="yellow", high="red", name="Ozone Level (ppm)") +
labs(title="Ozone Levels Across Days/Weeks in 2018",
x="Week of the Year", y="Day of the Month") +
theme_minimal() +
facet_wrap(~ Month, ncol=3)
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Load the dataset
data <- read.csv("Hurricane_Irma_2018_Cleaned.csv")
# Filter data to include only relevant columns and format as needed
data <- data %>%
mutate(Ozone_Concentration = as.numeric(Daily.Max.8.hour.Ozone.Concentration),
AQI = as.numeric(Daily.AQI.Value))
# Create the scatter plot
ggplot(data, aes(x = Ozone_Concentration, y = AQI, color = Local.Site.Name)) +
geom_point(alpha = 0.6) +
labs(title = "Scatter Plot of Ozone Concentration vs AQI",
x = "Daily Max 8-Hour Ozone Concentration (ppm)",
y = "Daily AQI Value",
color = "Site") +
theme_minimal()
library(ggplot2)
library(dplyr)
data <- read.csv("Hurricane_Irma_2018_Cleaned.csv")
data <- data %>%
mutate(Ozone_Concentration = as.numeric(Daily.Max.8.hour.Ozone.Concentration),
AQI = as.numeric(Daily.AQI.Value))
ggplot(data, aes(x = Ozone_Concentration, y = AQI, color = Local.Site.Name)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) + # Adds regression line without confidence interval
labs(title = "Scatter Plot of Ozone Concentration vs AQI with Trendline",
x = "Daily Max 8-Hour Ozone Concentration (ppm)",
y = "Daily AQI Value",
color = "Site") +
theme_minimal()
